
Game_consol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000015e  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000046  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000184  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f9  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000250  00000000  00000000  000004b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000708  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000123  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000086b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  7a:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <set_back_led_brightness>:



void set_back_led_brightness(void)
{
	if (CHECKBIT(PIND,PB_UP) == 0)
  82:	83 99       	sbic	0x10, 3	; 16
  84:	06 c0       	rjmp	.+12     	; 0x92 <set_back_led_brightness+0x10>
	{
		LCD_brig_value += 5;
  86:	80 91 60 00 	lds	r24, 0x0060
  8a:	90 91 61 00 	lds	r25, 0x0061
  8e:	05 96       	adiw	r24, 0x05	; 5
  90:	07 c0       	rjmp	.+14     	; 0xa0 <set_back_led_brightness+0x1e>
	}
	else if (CHECKBIT(PIND,PB_DOWN) == 0)
  92:	84 99       	sbic	0x10, 4	; 16
  94:	09 c0       	rjmp	.+18     	; 0xa8 <set_back_led_brightness+0x26>
	{
		LCD_brig_value -= 5;
  96:	80 91 60 00 	lds	r24, 0x0060
  9a:	90 91 61 00 	lds	r25, 0x0061
  9e:	05 97       	sbiw	r24, 0x05	; 5
  a0:	90 93 61 00 	sts	0x0061, r25
  a4:	80 93 60 00 	sts	0x0060, r24
	}
	OCR0 = LCD_brig_value;
  a8:	80 91 60 00 	lds	r24, 0x0060
  ac:	90 91 61 00 	lds	r25, 0x0061
  b0:	8c bf       	out	0x3c, r24	; 60
	
}
  b2:	08 95       	ret

000000b4 <__vector_1>:

ISR(INT0_vect)
{
  b4:	1f 92       	push	r1
  b6:	0f 92       	push	r0
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	0f 92       	push	r0
  bc:	11 24       	eor	r1, r1
  be:	2f 93       	push	r18
  c0:	3f 93       	push	r19
  c2:	4f 93       	push	r20
  c4:	5f 93       	push	r21
  c6:	6f 93       	push	r22
  c8:	7f 93       	push	r23
  ca:	8f 93       	push	r24
  cc:	9f 93       	push	r25
  ce:	af 93       	push	r26
  d0:	bf 93       	push	r27
  d2:	ef 93       	push	r30
  d4:	ff 93       	push	r31

	
	if (CHECKBIT(PIND,PB_A1) == 0)
  d6:	80 99       	sbic	0x10, 0	; 16
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <__vector_1+0x2e>
	{
		CLEARBIT(DDRC,BACK_LED);
  da:	a3 98       	cbi	0x14, 3	; 20
		MCUCR |= _BV(SM1) | _BV(SE);
  dc:	85 b7       	in	r24, 0x35	; 53
  de:	80 66       	ori	r24, 0x60	; 96
  e0:	85 bf       	out	0x35, r24	; 53
	}
	if (CHECKBIT(PIND,PB_A2) == 0)
  e2:	80 b3       	in	r24, 0x10	; 16
	{
	}
	if (CHECKBIT(PIND,PB_LEFT) == 0)
  e4:	80 b3       	in	r24, 0x10	; 16
	{
	}
	if (CHECKBIT(PIND,PB_RIGHT)== 0)
  e6:	80 b3       	in	r24, 0x10	; 16
	{
	}
	if (CHECKBIT(PIND,PB_UP) == 0)
  e8:	83 99       	sbic	0x10, 3	; 16
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__vector_1+0x3c>
	{
		set_back_led_brightness();
  ec:	0e 94 41 00 	call	0x82	; 0x82 <set_back_led_brightness>
	}
	if (CHECKBIT(PIND,PB_DOWN) == 0)
  f0:	84 99       	sbic	0x10, 4	; 16
  f2:	03 c0       	rjmp	.+6      	; 0xfa <__vector_1+0x46>
	{
		set_back_led_brightness();
  f4:	0e 94 41 00 	call	0x82	; 0x82 <set_back_led_brightness>
		PORTC = 0x00;
  f8:	15 ba       	out	0x15, r1	; 21
	}
	
}
  fa:	ff 91       	pop	r31
  fc:	ef 91       	pop	r30
  fe:	bf 91       	pop	r27
 100:	af 91       	pop	r26
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	7f 91       	pop	r23
 108:	6f 91       	pop	r22
 10a:	5f 91       	pop	r21
 10c:	4f 91       	pop	r20
 10e:	3f 91       	pop	r19
 110:	2f 91       	pop	r18
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <main>:

int main(void)

{
	//Input pin configeration
	DDRA |=_BV(PA0);
 11c:	d0 9a       	sbi	0x1a, 0	; 26
	PORTD =0x7F;	//pulup input buttons  
 11e:	8f e7       	ldi	r24, 0x7F	; 127
 120:	82 bb       	out	0x12, r24	; 18
	//***********************
	DDRC |= _BV(LOW_VOL_LED);
 122:	a0 9a       	sbi	0x14, 0	; 20
	


	//PWM mode configuration 
	TCCR0 |=_BV(WGM00)
 124:	83 b7       	in	r24, 0x33	; 51
 126:	84 66       	ori	r24, 0x64	; 100
 128:	83 bf       	out	0x33, r24	; 51
		  |_BV(COM01)
		  |_BV(CS02);
	DDRB |= _BV(BACK_LED);
 12a:	bb 9a       	sbi	0x17, 3	; 23
	//***************************	
	//Interrupts setting up 
	MCUCR |=_BV(ISC01)		//Rising edge interrupt for INT0
 12c:	85 b7       	in	r24, 0x35	; 53
 12e:	83 60       	ori	r24, 0x03	; 3
 130:	85 bf       	out	0x35, r24	; 53
			|_BV(ISC00);	//Rising edge interrupt
	GICR  |=_BV(INT0);		//External Interrupt Request Enable
 132:	8b b7       	in	r24, 0x3b	; 59
 134:	80 64       	ori	r24, 0x40	; 64
 136:	8b bf       	out	0x3b, r24	; 59
	SREG  |=_BV(7);
 138:	8f b7       	in	r24, 0x3f	; 63
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	8f bf       	out	0x3f, r24	; 63
	//******************************************
	
	set_back_led_brightness();
 13e:	0e 94 41 00 	call	0x82	; 0x82 <set_back_led_brightness>
    while (1) 
    {
	
	//	PORTC = 0x01;
	//	_delay_ms(500);
		PORTC = 0x01;
 142:	41 e0       	ldi	r20, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 144:	28 eb       	ldi	r18, 0xB8	; 184
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	45 bb       	out	0x15, r20	; 21
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	9f ef       	ldi	r25, 0xFF	; 255
 14e:	f9 01       	movw	r30, r18
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0x34>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 154:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 156:	d9 f7       	brne	.-10     	; 0x14e <main+0x32>
 158:	f7 cf       	rjmp	.-18     	; 0x148 <main+0x2c>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
